msgid ""
msgstr ""
"Project-Id-Version: solidity-test\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-13 16:47+0100\n"
"PO-Revision-Date: 2022-01-13 16:14\n"
"Last-Translator: \n"
"Language-Team: Spanish (Modern)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: solidity-test\n"
"X-Crowdin-Project-ID: 494285\n"
"X-Crowdin-Language: es-EM\n"
"X-Crowdin-File: 060-breaking-changes.po\n"
"X-Crowdin-File-ID: 1\n"
"Language: es_EM\n"

#: ../../060-breaking-changes.rst:3 40d3a7a169a24ba68f7bc7392787fa6d
msgid "Solidity v0.6.0 Breaking Changes"
msgstr ""

#: ../../060-breaking-changes.rst:5 75dfde614751456ba0c48d3836cd3c84
msgid "This section highlights the main breaking changes introduced in Solidity version 0.6.0, along with the reasoning behind the changes and how to update affected code. For the full list check `the release changelog <https://github.com/ethereum/solidity/releases/tag/v0.6.0>`_."
msgstr ""

#: ../../060-breaking-changes.rst:13 46ae8ec284244a4383a670ceee928284
msgid "Changes the Compiler Might not Warn About"
msgstr ""

#: ../../060-breaking-changes.rst:15 2bd8bf54868348bcaaa2019cd402f42c
msgid "This section lists changes where the behaviour of your code might change without the compiler telling you about it."
msgstr ""

#: ../../060-breaking-changes.rst:18 18e214fab40a4b45a3a96fdefe33426b
msgid "The resulting type of an exponentiation is the type of the base. It used to be the smallest type that can hold both the type of the base and the type of the exponent, as with symmetric operations. Additionally, signed types are allowed for the base of the exponentiation."
msgstr ""

#: ../../060-breaking-changes.rst:24 431362a5f6dd4b6db64c205b0ef76ffe
msgid "Explicitness Requirements"
msgstr ""

#: ../../060-breaking-changes.rst:26 46ed2c6a223f42bfa2f8e513c23d3828
msgid "This section lists changes where the code now needs to be more explicit, but the semantics do not change. For most of the topics the compiler will provide suggestions."
msgstr ""

#: ../../060-breaking-changes.rst:30 b9de600460f9480d9e6813789b005a0a
msgid "Functions can now only be overridden when they are either marked with the ``virtual`` keyword or defined in an interface. Functions without implementation outside an interface have to be marked ``virtual``. When overriding a function or modifier, the new keyword ``override`` must be used. When overriding a function or modifier defined in multiple parallel bases, all bases must be listed in parentheses after the keyword like so: ``override(Base1, Base2)``."
msgstr ""

#: ../../060-breaking-changes.rst:38 bd98980cfee14f72b47d613c8d856350
msgid "Member-access to ``length`` of arrays is now always read-only, even for storage arrays. It is no longer possible to resize storage arrays by assigning a new value to their length. Use ``push()``, ``push(value)`` or ``pop()`` instead, or assign a full array, which will of course overwrite the existing content. The reason behind this is to prevent storage collisions of gigantic storage arrays."
msgstr ""

#: ../../060-breaking-changes.rst:44 09ee760782c94cf18571165140dbf7c8
msgid "The new keyword ``abstract`` can be used to mark contracts as abstract. It has to be used if a contract does not implement all its functions. Abstract contracts cannot be created using the ``new`` operator, and it is not possible to generate bytecode for them during compilation."
msgstr ""

#: ../../060-breaking-changes.rst:48 73cc5f5e003547a09d124fa44089a280
msgid "Libraries have to implement all their functions, not only the internal ones."
msgstr ""

#: ../../060-breaking-changes.rst:50 203cfdc56b404cb1881f182135fde83b
msgid "The names of variables declared in inline assembly may no longer end in ``_slot`` or ``_offset``."
msgstr ""

#: ../../060-breaking-changes.rst:52 e4cf3ce28da04964841bdff7b649319f
msgid "Variable declarations in inline assembly may no longer shadow any declaration outside the inline assembly block. If the name contains a dot, its prefix up to the dot may not conflict with any declaration outside the inline assembly block."
msgstr ""

#: ../../060-breaking-changes.rst:56 e7f6c25de34c45d583cd9a27dd929078
msgid "State variable shadowing is now disallowed.  A derived contract can only declare a state variable ``x``, if there is no visible state variable with the same name in any of its bases."
msgstr ""

#: ../../060-breaking-changes.rst:62 cb1f509e37b44cd4b11806442bb92a23
msgid "Semantic and Syntactic Changes"
msgstr ""

#: ../../060-breaking-changes.rst:64 7157e8f6ebac40e4bef39f54303ddef2
msgid "This section lists changes where you have to modify your code and it does something else afterwards."
msgstr ""

#: ../../060-breaking-changes.rst:67 9fedc9391eea4f3b9e5ebb14cfb0fef2
msgid "Conversions from external function types to ``address`` are now disallowed. Instead external function types have a member called ``address``, similar to the existing ``selector`` member."
msgstr ""

#: ../../060-breaking-changes.rst:70 71e72c54b5da4abca6a4dd1da5e699e1
msgid "The function ``push(value)`` for dynamic storage arrays does not return the new length anymore (it returns nothing)."
msgstr ""

#: ../../060-breaking-changes.rst:72 5ec35b38c62f47c0bbc3229d81194a41
msgid "The unnamed function commonly referred to as \"fallback function\" was split up into a new fallback function that is defined using the ``fallback`` keyword and a receive ether function defined using the ``receive`` keyword."
msgstr ""

#: ../../060-breaking-changes.rst:76 21495c067ce248338f1cd151f22e42fb
msgid "If present, the receive ether function is called whenever the call data is empty (whether or not ether is received). This function is implicitly ``payable``."
msgstr ""

#: ../../060-breaking-changes.rst:79 45936ab6b5f84f58bccfe68534647172
msgid "The new fallback function is called when no other function matches (if the receive ether function does not exist then this includes calls with empty call data). You can make this function ``payable`` or not. If it is not ``payable`` then transactions not matching any other function which send value will revert. You should only need to implement the new fallback function if you are following an upgrade or proxy pattern."
msgstr ""

#: ../../060-breaking-changes.rst:87 5dc201affc9740d49fb29953da51c03a
msgid "New Features"
msgstr ""

#: ../../060-breaking-changes.rst:89 1d600e13dccb4d7da3565fd7b1652880
msgid "This section lists things that were not possible prior to Solidity 0.6.0 or were more difficult to achieve."
msgstr ""

#: ../../060-breaking-changes.rst:92 10884c96db654a2d89b5ce4237b37f99
msgid "The :ref:`try/catch statement <try-catch>` allows you to react on failed external calls."
msgstr ""

#: ../../060-breaking-changes.rst:93 020e6f3562e147679398eccc371b6e81
msgid "``struct`` and ``enum`` types can be declared at file level."
msgstr ""

#: ../../060-breaking-changes.rst:94 b4b2351b231c4471ab96c37711526dc5
msgid "Array slices can be used for calldata arrays, for example ``abi.decode(msg.data[4:], (uint, uint))`` is a low-level way to decode the function call payload."
msgstr ""

#: ../../060-breaking-changes.rst:96 83c74b103781440b8e08ccf37aab8882
msgid "Natspec supports multiple return parameters in developer documentation, enforcing the same naming check as ``@param``."
msgstr ""

#: ../../060-breaking-changes.rst:97 f2485273750242a09e83233f76f9ce4f
msgid "Yul and Inline Assembly have a new statement called ``leave`` that exits the current function."
msgstr ""

#: ../../060-breaking-changes.rst:98 a0ebdef8b5dd43a695d9b38f3f800f32
msgid "Conversions from ``address`` to ``address payable`` are now possible via ``payable(x)``, where ``x`` must be of type ``address``."
msgstr ""

#: ../../060-breaking-changes.rst:103 68910002d86e4e57b2b3d7f9be474b86
msgid "Interface Changes"
msgstr ""

#: ../../060-breaking-changes.rst:105 d51b0eb687f645248db23da2b21a0519
msgid "This section lists changes that are unrelated to the language itself, but that have an effect on the interfaces of the compiler. These may change the way how you use the compiler on the command line, how you use its programmable interface, or how you analyze the output produced by it."
msgstr ""

#: ../../060-breaking-changes.rst:110 773c7bcfc20c418a89184fecff71f1f4
msgid "New Error Reporter"
msgstr ""

#: ../../060-breaking-changes.rst:112 40045dfee28a476fb6b6254fc05340da
msgid "A new error reporter was introduced, which aims at producing more accessible error messages on the command line. It is enabled by default, but passing ``--old-reporter`` falls back to the the deprecated old error reporter."
msgstr ""

#: ../../060-breaking-changes.rst:116 8aadefb241524b478ff3551f63887328
msgid "Metadata Hash Options"
msgstr ""

#: ../../060-breaking-changes.rst:118 d72e2f29f4cb4cb795e8596352bddab0
msgid "The compiler now appends the `IPFS <https://ipfs.io/>`_ hash of the metadata file to the end of the bytecode by default (for details, see documentation on :doc:`contract metadata <metadata>`). Before 0.6.0, the compiler appended the `Swarm <https://ethersphere.github.io/swarm-home/>`_ hash by default, and in order to still support this behaviour, the new command line option ``--metadata-hash`` was introduced. It allows you to select the hash to be produced and appended, by passing either ``ipfs`` or ``swarm`` as value to the ``--metadata-hash`` command line option. Passing the value ``none`` completely removes the hash."
msgstr ""

#: ../../060-breaking-changes.rst:125 ea9aea2f35b64a8cb22715ff146f3bd3
msgid "These changes can also be used via the :ref:`Standard JSON Interface<compiler-api>` and effect the metadata JSON generated by the compiler."
msgstr ""

#: ../../060-breaking-changes.rst:127 2579a850373f4a49a08a2147f14074d5
msgid "The recommended way to read the metadata is to read the last two bytes to determine the length of the CBOR encoding and perform a proper decoding on that data block as explained in the :ref:`metadata section<encoding-of-the-metadata-hash-in-the-bytecode>`."
msgstr ""

#: ../../060-breaking-changes.rst:131 3ad68c353e1b46c6bf67af77e9d8c3ea
msgid "Yul Optimizer"
msgstr ""

#: ../../060-breaking-changes.rst:133 2ed10f70cb2348aba4e4836985220158
msgid "Together with the legacy bytecode optimizer, the :doc:`Yul <yul>` optimizer is now enabled by default when you call the compiler with ``--optimize``. It can be disabled by calling the compiler with ``--no-optimize-yul``. This mostly affects code that uses ABI coder v2."
msgstr ""

#: ../../060-breaking-changes.rst:138 35ae85fb78f240449ce5cad2f52f01e9
msgid "C API Changes"
msgstr ""

#: ../../060-breaking-changes.rst:140 ce2502e30f6647c59fd7203ecd4a02c0
msgid "The client code that uses the C API of ``libsolc`` is now in control of the memory used by the compiler. To make this change consistent, ``solidity_free`` was renamed to ``solidity_reset``, the functions ``solidity_alloc`` and ``solidity_free`` were added and ``solidity_compile`` now returns a string that must be explicitly freed via ``solidity_free()``."
msgstr ""

#: ../../060-breaking-changes.rst:147 d35ebd0d1c204d16af8cfc1d5c4c8b56
msgid "How to update your code"
msgstr ""

#: ../../060-breaking-changes.rst:149 474ba5e182404c3598ffefa88f87d74b
msgid "This section gives detailed instructions on how to update prior code for every breaking change."
msgstr ""

#: ../../060-breaking-changes.rst:151 e1de91efa06b4c06bd48975b58a4a031
msgid "Change ``address(f)`` to ``f.address`` for ``f`` being of external function type."
msgstr ""

#: ../../060-breaking-changes.rst:153 189c425de527479e813f66955d1c52c8
msgid "Replace ``function () external [payable] { ... }`` by either ``receive() external payable { ... }``, ``fallback() external [payable] { ... }`` or both. Prefer using a ``receive`` function only, whenever possible."
msgstr ""

#: ../../060-breaking-changes.rst:157 5a2484ef282049f3b4fe18aa6a525158
msgid "Change ``uint length = array.push(value)`` to ``array.push(value);``. The new length can be accessed via ``array.length``."
msgstr ""

#: ../../060-breaking-changes.rst:160 c8979c7883cd45cb94e0a0f50eb3134e
msgid "Change ``array.length++`` to ``array.push()`` to increase, and use ``pop()`` to decrease the length of a storage array."
msgstr ""

#: ../../060-breaking-changes.rst:163 029a618de0d94baf97efe46bdc3305db
msgid "For every named return parameter in a function's ``@dev`` documentation define a ``@return`` entry which contains the parameter's name as the first word. E.g. if you have function ``f()`` defined like ``function f() public returns (uint value)`` and a ``@dev`` annotating it, document its return parameters like so: ``@return value The return value.``. You can mix named and un-named return parameters documentation so long as the notices are in the order they appear in the tuple return type."
msgstr ""

#: ../../060-breaking-changes.rst:169 9a15c180fa844e62aea2d6cb1b35192b
msgid "Choose unique identifiers for variable declarations in inline assembly that do not conflict with declarations outside the inline assembly block."
msgstr ""

#: ../../060-breaking-changes.rst:172 2c308ad265624345ad44d8b96d8ae9a3
msgid "Add ``virtual`` to every non-interface function you intend to override. Add ``virtual`` to all functions without implementation outside interfaces. For single inheritance, add ``override`` to every overriding function. For multiple inheritance, add ``override(A, B, ..)``, where you list all contracts that define the overridden function in the parentheses. When multiple bases define the same function, the inheriting contract must override all conflicting functions."
msgstr ""

