msgid ""
msgstr ""
"Project-Id-Version: solidity-test\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-13 16:47+0100\n"
"PO-Revision-Date: 2022-01-13 16:14\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: solidity-test\n"
"X-Crowdin-Project-ID: 494285\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: analysing-compilation-output.po\n"
"X-Crowdin-File-ID: 35\n"
"Language: pt_BR\n"

#: ../../analysing-compilation-output.rst:5 c4735fa96257453889c8ce88c4bd7485
msgid "Analysing the Compiler Output"
msgstr ""

#: ../../analysing-compilation-output.rst:7 f6a99c485e88446cb79d2770672a9a81
msgid "It is often useful to look at the assembly code generated by the compiler. The generated binary, i.e., the output of ``solc --bin contract.sol``, is generally difficult to read. It is recommended to use the flag ``--asm`` to analyse the assembly output. Even for large contracts, looking at a visual diff of the assembly before and after a change is often very enlightening."
msgstr ""

#: ../../analysing-compilation-output.rst:12 3c37234c6fbb4938904b102c738344f6
msgid "Consider the following contract (named, say ``contract.sol``):"
msgstr ""

#: ../../analysing-compilation-output.rst:24 ce3d365b6d3e4fc28c00f5102daef051
msgid "The following would be the output of ``solc --asm contract.sol``"
msgstr ""

#: ../../analysing-compilation-output.rst:172 8a62fd47ce52487b87e87f45e3496ab2
msgid "Alternatively, the above output can also be obtained from `Remix <https://remix.ethereum.org/>`_, under the option \"Compilation Details\" after compiling a contract."
msgstr ""

#: ../../analysing-compilation-output.rst:175 b5427bd76dda43738471fb3d1d5291dd
msgid "Notice that the ``asm`` output starts with the creation / constructor code. The deploy code is provided as part of the sub object (in the above example, it is part of the sub-object ``sub_0``). The ``auxdata`` field corresponds to the contract :ref:`metadata <encoding-of-the-metadata-hash-in-the-bytecode>`. The comments in the assembly output point to the source location. Note that ``#utility.yul`` is an internally generated file of utility functions that can be obtained using the flags ``--combined-json generated-sources,generated-sources-runtime``."
msgstr ""

#: ../../analysing-compilation-output.rst:183 a2ddbc081c9c48368c5a8a0fefff72cd
msgid "Similarly, the optimized assembly can be obtained with the command: ``solc --optimize --asm contract.sol``. Often times, it is interesting to see if two different sources in Solidity result in the same optimized code. For example, to see if the expressions ``(a * b) / c``, ``a * b / c`` generates the same bytecode. This can be easily done by taking a ``diff`` of the corresponding assembly output, after potentially stripping comments that reference the source locations."
msgstr ""

#: ../../analysing-compilation-output.rst:191 0e8f8ade5c08470f81b686bb586a4d43
msgid "The ``--asm`` output is not designed to be machine readable. Therefore, there may be breaking changes on the output between minor versions of solc."
msgstr ""

