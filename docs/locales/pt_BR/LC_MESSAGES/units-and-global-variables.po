msgid ""
msgstr ""
"Project-Id-Version: solidity-test\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-13 16:47+0100\n"
"PO-Revision-Date: 2022-01-13 16:14\n"
"Last-Translator: \n"
"Language-Team: Portuguese, Brazilian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: solidity-test\n"
"X-Crowdin-Project-ID: 494285\n"
"X-Crowdin-Language: pt-BR\n"
"X-Crowdin-File: units-and-global-variables.po\n"
"X-Crowdin-File-ID: 33\n"
"Language: pt_BR\n"

#: ../../units-and-global-variables.rst:3 ea43807b9578413ab642f7e094c33746
msgid "Units and Globally Available Variables"
msgstr ""

#: ../../units-and-global-variables.rst:8 5f6ba5ad331c4b72baeeb3ecb3998ac1
msgid "Ether Units"
msgstr ""

#: ../../units-and-global-variables.rst:10 f08a3fbb52d9454794e8f1f102680c8d
msgid "A literal number can take a suffix of ``wei``, ``gwei`` or ``ether`` to specify a subdenomination of Ether, where Ether numbers without a postfix are assumed to be Wei."
msgstr ""

#: ../../units-and-global-variables.rst:19 62dc5e02af1e41bcb52684c158b96b81
msgid "The only effect of the subdenomination suffix is a multiplication by a power of ten."
msgstr ""

#: ../../units-and-global-variables.rst:22 a25e486f095d4b03937e14571d457f13
msgid "The denominations ``finney`` and ``szabo`` have been removed in version 0.7.0."
msgstr ""

#: ../../units-and-global-variables.rst:27 90728c0769114fdbb93f1e5ba59aaec4
msgid "Time Units"
msgstr ""

#: ../../units-and-global-variables.rst:29 8bb2659b0b164335b5a73e28a3087f21
msgid "Suffixes like ``seconds``, ``minutes``, ``hours``, ``days`` and ``weeks`` after literal numbers can be used to specify units of time where seconds are the base unit and units are considered naively in the following way:"
msgstr ""

#: ../../units-and-global-variables.rst:33 9e08d4dab05247bd9ea65459531694c2
msgid "``1 == 1 seconds``"
msgstr ""

#: ../../units-and-global-variables.rst:34 b26b569796ec47a286c994a2cef45f1a
msgid "``1 minutes == 60 seconds``"
msgstr ""

#: ../../units-and-global-variables.rst:35 512908c9e4794c2bbe5652140c90db33
msgid "``1 hours == 60 minutes``"
msgstr ""

#: ../../units-and-global-variables.rst:36 8563ef8b24e142f5972f74c63afa3c1e
msgid "``1 days == 24 hours``"
msgstr ""

#: ../../units-and-global-variables.rst:37 ec2d0249ec4040efa74f7d94eb28ec3d
msgid "``1 weeks == 7 days``"
msgstr ""

#: ../../units-and-global-variables.rst:39 0464e72faf6b41fe89c73a7c2993c7fb
msgid "Take care if you perform calendar calculations using these units, because not every year equals 365 days and not even every day has 24 hours because of `leap seconds <https://en.wikipedia.org/wiki/Leap_second>`_. Due to the fact that leap seconds cannot be predicted, an exact calendar library has to be updated by an external oracle."
msgstr ""

#: ../../units-and-global-variables.rst:46 2b3ac9035c7f4270821033be3e31d06e
msgid "The suffix ``years`` has been removed in version 0.5.0 due to the reasons above."
msgstr ""

#: ../../units-and-global-variables.rst:48 eeb97515773a4031888325f4a4b75003
msgid "These suffixes cannot be applied to variables. For example, if you want to interpret a function parameter in days, you can in the following way:"
msgstr ""

#: ../../units-and-global-variables.rst:62 21c60e2aee0042f69dff97cbbb7cfdd0
msgid "Special Variables and Functions"
msgstr ""

#: ../../units-and-global-variables.rst:64 87aeb1553d864d60ae7cc616415dffb3
msgid "There are special variables and functions which always exist in the global namespace and are mainly used to provide information about the blockchain or are general-use utility functions."
msgstr ""

#: ../../units-and-global-variables.rst:72 2e06cf6e42bb4ab6b6c9f7d2e7c3956e
msgid "Block and Transaction Properties"
msgstr ""

#: ../../units-and-global-variables.rst:74 dc798e8f5ed7483da8a30763cb85f59b
msgid "``blockhash(uint blockNumber) returns (bytes32)``: hash of the given block when ``blocknumber`` is one of the 256 most recent blocks; otherwise returns zero"
msgstr ""

#: ../../units-and-global-variables.rst:75 778e5ccb3a99425a8b22455bce179584
msgid "``block.basefee`` (``uint``): current block's base fee (`EIP-3198 <https://eips.ethereum.org/EIPS/eip-3198>`_ and `EIP-1559 <https://eips.ethereum.org/EIPS/eip-1559>`_)"
msgstr ""

#: ../../units-and-global-variables.rst:76 b792e2ec686543069fe5361fe4e1fe84
msgid "``block.chainid`` (``uint``): current chain id"
msgstr ""

#: ../../units-and-global-variables.rst:77 e0c7b9179f054c39a8886d824504b3e4
msgid "``block.coinbase`` (``address payable``): current block miner's address"
msgstr ""

#: ../../units-and-global-variables.rst:78 cac7a50be3494e4e8cd479ae10212c87
msgid "``block.difficulty`` (``uint``): current block difficulty"
msgstr ""

#: ../../units-and-global-variables.rst:79 33530539e5134123b4b7924bc71bd084
msgid "``block.gaslimit`` (``uint``): current block gaslimit"
msgstr ""

#: ../../units-and-global-variables.rst:80 1ee843a04f204642a3aa6e586ce9380e
msgid "``block.number`` (``uint``): current block number"
msgstr ""

#: ../../units-and-global-variables.rst:81 29beb1350a36414b9701f07d202214aa
msgid "``block.timestamp`` (``uint``): current block timestamp as seconds since unix epoch"
msgstr ""

#: ../../units-and-global-variables.rst:82 756e854293c74261b6b34f68c0ba1b44
msgid "``gasleft() returns (uint256)``: remaining gas"
msgstr ""

#: ../../units-and-global-variables.rst:83 645531e8a6044a6ebc6b39f99c2e6505
msgid "``msg.data`` (``bytes calldata``): complete calldata"
msgstr ""

#: ../../units-and-global-variables.rst:84 5ef84f261ebb4a47a0577f585888ff52
msgid "``msg.sender`` (``address``): sender of the message (current call)"
msgstr ""

#: ../../units-and-global-variables.rst:85 ea2df408ff69492795a839fe8033991e
msgid "``msg.sig`` (``bytes4``): first four bytes of the calldata (i.e. function identifier)"
msgstr ""

#: ../../units-and-global-variables.rst:86 122f453d525e48b080168617a0af6e31
msgid "``msg.value`` (``uint``): number of wei sent with the message"
msgstr ""

#: ../../units-and-global-variables.rst:87 1d790e8faee149eb90159faf9b150302
msgid "``tx.gasprice`` (``uint``): gas price of the transaction"
msgstr ""

#: ../../units-and-global-variables.rst:88 8e082aa5887945e2962e899e0a5ae020
msgid "``tx.origin`` (``address``): sender of the transaction (full call chain)"
msgstr ""

#: ../../units-and-global-variables.rst:91 64bb62c5aca54b618e30e7fbbbac907d
msgid "The values of all members of ``msg``, including ``msg.sender`` and ``msg.value`` can change for every **external** function call. This includes calls to library functions."
msgstr ""

#: ../../units-and-global-variables.rst:96 1af00a65a72b474c8d1882706af70914
msgid "When contracts are evaluated off-chain rather than in context of a transaction included in a block, you should not assume that ``block.*`` and ``tx.*`` refer to values from any specific block or transaction. These values are provided by the EVM implementation that executes the contract and can be arbitrary."
msgstr ""

#: ../../units-and-global-variables.rst:102 da5bdcc1a4d447fc80cf754051a1db63
msgid "Do not rely on ``block.timestamp`` or ``blockhash`` as a source of randomness, unless you know what you are doing."
msgstr ""

#: ../../units-and-global-variables.rst:105 e2321cf7f1434ba4a1584d2f791e31c6
msgid "Both the timestamp and the block hash can be influenced by miners to some degree. Bad actors in the mining community can for example run a casino payout function on a chosen hash and just retry a different hash if they did not receive any money."
msgstr ""

#: ../../units-and-global-variables.rst:109 6cd864b41d83404fb126fa30cbea8759
msgid "The current block timestamp must be strictly larger than the timestamp of the last block, but the only guarantee is that it will be somewhere between the timestamps of two consecutive blocks in the canonical chain."
msgstr ""

#: ../../units-and-global-variables.rst:114 05b4ba026fa94ce6ad31951d2c0f2f3f
msgid "The block hashes are not available for all blocks for scalability reasons. You can only access the hashes of the most recent 256 blocks, all other values will be zero."
msgstr ""

#: ../../units-and-global-variables.rst:119 02f41a7b858c461287153d9dab398b4b
msgid "The function ``blockhash`` was previously known as ``block.blockhash``, which was deprecated in version 0.4.22 and removed in version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:123 c0efd73a0a824c58af9adbbd86051fc4
msgid "The function ``gasleft`` was previously known as ``msg.gas``, which was deprecated in version 0.4.21 and removed in version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:127 63dee14ecdbe477fb8ec2c7848161c80
msgid "In version 0.7.0, the alias ``now`` (for ``block.timestamp``) was removed."
msgstr ""

#: ../../units-and-global-variables.rst:132 4bbcbd745a82464d92fe8f154b7495aa
msgid "ABI Encoding and Decoding Functions"
msgstr ""

#: ../../units-and-global-variables.rst:134 257e9d612ebb436a8f201fca1c38e6a7
msgid "``abi.decode(bytes memory encodedData, (...)) returns (...)``: ABI-decodes the given data, while the types are given in parentheses as second argument. Example: ``(uint a, uint[2] memory b, bytes memory c) = abi.decode(data, (uint, uint[2], bytes))``"
msgstr ""

#: ../../units-and-global-variables.rst:135 5ba04e55a0534d059e5be47925973f73
msgid "``abi.encode(...) returns (bytes memory)``: ABI-encodes the given arguments"
msgstr ""

#: ../../units-and-global-variables.rst:136 446aba55ef9845ec96e7619c8c7094d6
msgid "``abi.encodePacked(...) returns (bytes memory)``: Performs :ref:`packed encoding <abi_packed_mode>` of the given arguments. Note that packed encoding can be ambiguous!"
msgstr ""

#: ../../units-and-global-variables.rst:137 05c3531a3abb4e6c9121faa6205be61e
msgid "``abi.encodeWithSelector(bytes4 selector, ...) returns (bytes memory)``: ABI-encodes the given arguments starting from the second and prepends the given four-byte selector"
msgstr ""

#: ../../units-and-global-variables.rst:138 10efb47535044755a51aadf346e6f1c8
msgid "``abi.encodeWithSignature(string memory signature, ...) returns (bytes memory)``: Equivalent to ``abi.encodeWithSelector(bytes4(keccak256(bytes(signature))), ...)``"
msgstr ""

#: ../../units-and-global-variables.rst:139 921d1cc6ab254ec8a2ef7bb4c3832013
msgid "``abi.encodeCall(function functionPointer, (...)) returns (bytes memory)``: ABI-encodes a call to ``functionPointer`` with the arguments found in the tuple. Performs a full type-check, ensuring the types match the function signature. Result equals ``abi.encodeWithSelector(functionPointer.selector, (...))``"
msgstr ""

#: ../../units-and-global-variables.rst:142 8a02cc3fcd18467d91cf730def899c1d
msgid "These encoding functions can be used to craft data for external function calls without actually calling an external function. Furthermore, ``keccak256(abi.encodePacked(a, b))`` is a way to compute the hash of structured data (although be aware that it is possible to craft a \"hash collision\" using different function parameter types)."
msgstr ""

#: ../../units-and-global-variables.rst:147 f937c16b2b914087b8d9fb883c6979dc
msgid "See the documentation about the :ref:`ABI <ABI>` and the :ref:`tightly packed encoding <abi_packed_mode>` for details about the encoding."
msgstr ""

#: ../../units-and-global-variables.rst:153 880de6923a1f4159b5ca948a8fc811d9
msgid "Members of bytes"
msgstr ""

#: ../../units-and-global-variables.rst:155 f78adcb5410f4237bb90ca9b5c5645bc
msgid "``bytes.concat(...) returns (bytes memory)``: :ref:`Concatenates variable number of bytes and bytes1, ..., bytes32 arguments to one byte array<bytes-concat>`"
msgstr ""

#: ../../units-and-global-variables.rst:160 daba2ee2352149cab4bcba907dcab1e1
msgid "Error Handling"
msgstr ""

#: ../../units-and-global-variables.rst:162 268d06e97cd34f38ac034dd674549dc3
msgid "See the dedicated section on :ref:`assert and require<assert-and-require>` for more details on error handling and when to use which function."
msgstr ""

#: ../../units-and-global-variables.rst:166 e03876ba0859496499107a42c2db2f98
msgid "``assert(bool condition)``"
msgstr ""

#: ../../units-and-global-variables.rst:166 1325cf182dc144ca8e63d5d3f2cd4424
msgid "causes a Panic error and thus state change reversion if the condition is not met - to be used for internal errors."
msgstr ""

#: ../../units-and-global-variables.rst:169 6da817cddceb4e9595efe24c3540cb5a
msgid "``require(bool condition)``"
msgstr ""

#: ../../units-and-global-variables.rst:169 c16aca6d1a4c46559f47d9f0847b0612
msgid "reverts if the condition is not met - to be used for errors in inputs or external components."
msgstr ""

#: ../../units-and-global-variables.rst:172 6fb12c6c33d84857ae70a53bf9800fe6
msgid "``require(bool condition, string memory message)``"
msgstr ""

#: ../../units-and-global-variables.rst:172 9d7abeeb614e4602a68dc5592c14c410
msgid "reverts if the condition is not met - to be used for errors in inputs or external components. Also provides an error message."
msgstr ""

#: ../../units-and-global-variables.rst:175 48560c04a8f14eda9afde3f976a0d00d
msgid "``revert()``"
msgstr ""

#: ../../units-and-global-variables.rst:175 502c77748cbc4325a37fbae14bf20905
msgid "abort execution and revert state changes"
msgstr ""

#: ../../units-and-global-variables.rst:178 23fd65a9616c457f8bdf5baf14a112aa
msgid "``revert(string memory reason)``"
msgstr ""

#: ../../units-and-global-variables.rst:178 e1369db10f564db28a8b5e23d674b060
msgid "abort execution and revert state changes, providing an explanatory string"
msgstr ""

#: ../../units-and-global-variables.rst:185 de4aff920ad54f11bff9216c9508fc5b
msgid "Mathematical and Cryptographic Functions"
msgstr ""

#: ../../units-and-global-variables.rst:188 168863d84077451b941acb40191f9ca6
msgid "``addmod(uint x, uint y, uint k) returns (uint)``"
msgstr ""

#: ../../units-and-global-variables.rst:188 09e6fb27fb334116a13d8b9e184c99ee
msgid "compute ``(x + y) % k`` where the addition is performed with arbitrary precision and does not wrap around at ``2**256``. Assert that ``k != 0`` starting from version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:191 72c70320e05d428983dfc385fa71aef2
msgid "``mulmod(uint x, uint y, uint k) returns (uint)``"
msgstr ""

#: ../../units-and-global-variables.rst:191 95a933b65b0648bf90b1cb5a619a6194
msgid "compute ``(x * y) % k`` where the multiplication is performed with arbitrary precision and does not wrap around at ``2**256``. Assert that ``k != 0`` starting from version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:194 92952d1f6d514f79b6e694f67022ab02
msgid "``keccak256(bytes memory) returns (bytes32)``"
msgstr ""

#: ../../units-and-global-variables.rst:194 efce5a173f3d4263b4ed43e0fda88545
msgid "compute the Keccak-256 hash of the input"
msgstr ""

#: ../../units-and-global-variables.rst:198 c422992e6c504fb3b93592e93979b6dc
msgid "There used to be an alias for ``keccak256`` called ``sha3``, which was removed in version 0.5.0."
msgstr ""

#: ../../units-and-global-variables.rst:201 31d9d05b6ae540fa93fc9c752b35c252
msgid "``sha256(bytes memory) returns (bytes32)``"
msgstr ""

#: ../../units-and-global-variables.rst:201 930f56fd4c494313a01c3c61bbce9629
msgid "compute the SHA-256 hash of the input"
msgstr ""

#: ../../units-and-global-variables.rst:204 10fb1a2a7b4442eaadf1ed9a33102181
msgid "``ripemd160(bytes memory) returns (bytes20)``"
msgstr ""

#: ../../units-and-global-variables.rst:204 83e2df56e83248608278f8a9a37d789e
msgid "compute RIPEMD-160 hash of the input"
msgstr ""

#: ../../units-and-global-variables.rst:217 bb4bd03a641545fbb43d4e395e05658b
msgid "``ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)``"
msgstr ""

#: ../../units-and-global-variables.rst:207 a56417aeca2d423885d4cdde3d1e9fb7
msgid "recover the address associated with the public key from elliptic curve signature or return zero on error. The function parameters correspond to ECDSA values of the signature:"
msgstr ""

#: ../../units-and-global-variables.rst:210 ff120f1666d244769623abba0e898700
msgid "``r`` = first 32 bytes of signature"
msgstr ""

#: ../../units-and-global-variables.rst:211 b43329fd8415481c9c60676e47fb369d
msgid "``s`` = second 32 bytes of signature"
msgstr ""

#: ../../units-and-global-variables.rst:212 7a110c81777e4a1da5b768a98af5b076
msgid "``v`` = final 1 byte of signature"
msgstr ""

#: ../../units-and-global-variables.rst:214 f72250f933734d12b3dbc8cb7164e3a4
msgid "``ecrecover`` returns an ``address``, and not an ``address payable``. See :ref:`address payable<address>` for conversion, in case you need to transfer funds to the recovered address."
msgstr ""

#: ../../units-and-global-variables.rst:217 ba808d234df24b22ac986c12d6b121ee
msgid "For further details, read `example usage <https://ethereum.stackexchange.com/questions/1777/workflow-on-signing-a-string-with-private-key-followed-by-signature-verificatio>`_."
msgstr ""

#: ../../units-and-global-variables.rst:221 d6207a0b0cca4ac18051d4a0a8f10dc1
msgid "If you use ``ecrecover``, be aware that a valid signature can be turned into a different valid signature without requiring knowledge of the corresponding private key. In the Homestead hard fork, this issue was fixed for _transaction_ signatures (see `EIP-2 <https://eips.ethereum.org/EIPS/eip-2#specification>`_), but the ecrecover function remained unchanged."
msgstr ""

#: ../../units-and-global-variables.rst:226 bb2d98f7b01445bc91ecf7208d2b7be3
msgid "This is usually not a problem unless you require signatures to be unique or use them to identify items. OpenZeppelin have a `ECDSA helper library <https://docs.openzeppelin.com/contracts/2.x/api/cryptography#ECDSA>`_ that you can use as a wrapper for ``ecrecover`` without this issue."
msgstr ""

#: ../../units-and-global-variables.rst:231 9d94e82e9bc041dab9b2e1231161759a
msgid "When running ``sha256``, ``ripemd160`` or ``ecrecover`` on a *private blockchain*, you might encounter Out-of-Gas. This is because these functions are implemented as \"precompiled contracts\" and only really exist after they receive the first message (although their contract code is hardcoded). Messages to non-existing contracts are more expensive and thus the execution might run into an Out-of-Gas error. A workaround for this problem is to first send Wei (1 for example) to each of the contracts before you use them in your actual contracts. This is not an issue on the main or test net."
msgstr ""

#: ../../units-and-global-variables.rst:238 9b6b14f645de43cab4eca5b8c2b115de
msgid "Members of Address Types"
msgstr ""

#: ../../units-and-global-variables.rst:241 090d4fc5f2db44e9aff8538f5e72b69c
msgid "``<address>.balance`` (``uint256``)"
msgstr ""

#: ../../units-and-global-variables.rst:241 bde481212893448a921fb35bd247846b
msgid "balance of the :ref:`address` in Wei"
msgstr ""

#: ../../units-and-global-variables.rst:244 c4dfa070b9794270a1e51f035f8f03d7
msgid "``<address>.code`` (``bytes memory``)"
msgstr ""

#: ../../units-and-global-variables.rst:244 966731fd565d4eb4af941bed7a795e45
msgid "code at the :ref:`address` (can be empty)"
msgstr ""

#: ../../units-and-global-variables.rst:247 4c300e4adca348cc9c9941451b93dd6e
msgid "``<address>.codehash`` (``bytes32``)"
msgstr ""

#: ../../units-and-global-variables.rst:247 50dfa86030cd4548ae154e5a4c5ce54b
msgid "the codehash of the :ref:`address`"
msgstr ""

#: ../../units-and-global-variables.rst:250 222985a3dbd0492bb90b3af6324cd863
msgid "``<address payable>.transfer(uint256 amount)``"
msgstr ""

#: ../../units-and-global-variables.rst:250 edf19c8e9a4241aaa4799b83eb5164e1
msgid "send given amount of Wei to :ref:`address`, reverts on failure, forwards 2300 gas stipend, not adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:253 4bda2486845a4e18b017aad81f496a6d
msgid "``<address payable>.send(uint256 amount) returns (bool)``"
msgstr ""

#: ../../units-and-global-variables.rst:253 884be22f298c45028fdf6294712f34e0
msgid "send given amount of Wei to :ref:`address`, returns ``false`` on failure, forwards 2300 gas stipend, not adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:256 97fd8702bfda431cae44635cdd8972d1
msgid "``<address>.call(bytes memory) returns (bool, bytes memory)``"
msgstr ""

#: ../../units-and-global-variables.rst:256 a9b840ca6b4c4660a2da8dd396753d12
msgid "issue low-level ``CALL`` with the given payload, returns success condition and return data, forwards all available gas, adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:259 fa5b5a295b824b73997d12ffaecfa71e
msgid "``<address>.delegatecall(bytes memory) returns (bool, bytes memory)``"
msgstr ""

#: ../../units-and-global-variables.rst:259 a6aa684f16d24900983648e4905b03cf
msgid "issue low-level ``DELEGATECALL`` with the given payload, returns success condition and return data, forwards all available gas, adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:262 d164a30329de4552bc2938257e6e3cea
msgid "``<address>.staticcall(bytes memory) returns (bool, bytes memory)``"
msgstr ""

#: ../../units-and-global-variables.rst:262 641621b114994fe3b879d446928de64e
msgid "issue low-level ``STATICCALL`` with the given payload, returns success condition and return data, forwards all available gas, adjustable"
msgstr ""

#: ../../units-and-global-variables.rst:264 ffe597620592490bac5490662cf61560
msgid "For more information, see the section on :ref:`address`."
msgstr ""

#: ../../units-and-global-variables.rst:267 cc30d7407cfa4bd8b3a324bfefd7a418
msgid "You should avoid using ``.call()`` whenever possible when executing another contract function as it bypasses type checking, function existence check, and argument packing."
msgstr ""

#: ../../units-and-global-variables.rst:271 7a3a52eb39b54326b42607a5f2210221
msgid "There are some dangers in using ``send``: The transfer fails if the call stack depth is at 1024 (this can always be forced by the caller) and it also fails if the recipient runs out of gas. So in order to make safe Ether transfers, always check the return value of ``send``, use ``transfer`` or even better: Use a pattern where the recipient withdraws the money."
msgstr ""

#: ../../units-and-global-variables.rst:277 3a982e2f526948e19be0d652e0c5f710
msgid "Due to the fact that the EVM considers a call to a non-existing contract to always succeed, Solidity includes an extra check using the ``extcodesize`` opcode when performing external calls. This ensures that the contract that is about to be called either actually exists (it contains code) or an exception is raised."
msgstr ""

#: ../../units-and-global-variables.rst:282 df85e8830df641d7a27612edfc48db9a
msgid "The low-level calls which operate on addresses rather than contract instances (i.e. ``.call()``, ``.delegatecall()``, ``.staticcall()``, ``.send()`` and ``.transfer()``) **do not** include this check, which makes them cheaper in terms of gas but also less safe."
msgstr ""

#: ../../units-and-global-variables.rst:287 fd8ad95a29604898a3fc475f7e683bbb
msgid "Prior to version 0.5.0, Solidity allowed address members to be accessed by a contract instance, for example ``this.balance``. This is now forbidden and an explicit conversion to address must be done: ``address(this).balance``."
msgstr ""

#: ../../units-and-global-variables.rst:291 7e2733f76f5d4e25b9b2d8376ceee7f2
msgid "If state variables are accessed via a low-level delegatecall, the storage layout of the two contracts must align in order for the called contract to correctly access the storage variables of the calling contract by name. This is of course not the case if storage pointers are passed as function arguments as in the case for the high-level libraries."
msgstr ""

#: ../../units-and-global-variables.rst:297 3c68c88df6874151866fd2a575850504
msgid "Prior to version 0.5.0, ``.call``, ``.delegatecall`` and ``.staticcall`` only returned the success condition and not the return data."
msgstr ""

#: ../../units-and-global-variables.rst:301 a7212b392b5b4896b31585cb89c34ef2
msgid "Prior to version 0.5.0, there was a member called ``callcode`` with similar but slightly different semantics than ``delegatecall``."
msgstr ""

#: ../../units-and-global-variables.rst:308 0ea3747482024bd89c70f443aea6075f
msgid "Contract Related"
msgstr ""

#: ../../units-and-global-variables.rst:311 32955734d6aa42d7b07396851fe311c6
msgid "``this`` (current contract's type)"
msgstr ""

#: ../../units-and-global-variables.rst:311 75e418aedef843ef8364a025feef2431
msgid "the current contract, explicitly convertible to :ref:`address`"
msgstr ""

#: ../../units-and-global-variables.rst:322 316809e4443543ee97f5aa2f26510df9
msgid "``selfdestruct(address payable recipient)``"
msgstr ""

#: ../../units-and-global-variables.rst:314 7390b01c504d4e28a00158e09978b857
msgid "Destroy the current contract, sending its funds to the given :ref:`address` and end execution. Note that ``selfdestruct`` has some peculiarities inherited from the EVM:"
msgstr ""

#: ../../units-and-global-variables.rst:318 0b4e33566c54453e8ee2e0eec22557a0
msgid "the receiving contract's receive function is not executed."
msgstr ""

#: ../../units-and-global-variables.rst:319 714b0a235a5f4c10a560113b4bf84b84
msgid "the contract is only really destroyed at the end of the transaction and ``revert`` s might \"undo\" the destruction."
msgstr ""

#: ../../units-and-global-variables.rst:324 e64e2d772f49414fac75c32fcd303385
msgid "Furthermore, all functions of the current contract are callable directly including the current function."
msgstr ""

#: ../../units-and-global-variables.rst:327 a0a7e404d67c4bc8932a51e099fddcd6
msgid "Prior to version 0.5.0, there was a function called ``suicide`` with the same semantics as ``selfdestruct``."
msgstr ""

#: ../../units-and-global-variables.rst:335 7e344ad13d4a4ee98e6df8e6c186d2cf
msgid "Type Information"
msgstr ""

#: ../../units-and-global-variables.rst:337 e81b3cdd88194be388cf2d877ac1f252
msgid "The expression ``type(X)`` can be used to retrieve information about the type ``X``. Currently, there is limited support for this feature (``X`` can be either a contract or an integer type) but it might be expanded in the future."
msgstr ""

#: ../../units-and-global-variables.rst:341 174058af7705478a952871e848370fd9
msgid "The following properties are available for a contract type ``C``:"
msgstr ""

#: ../../units-and-global-variables.rst:344 ad0057665c9848749316713171f22047
msgid "``type(C).name``"
msgstr ""

#: ../../units-and-global-variables.rst:344 b1ec1e29aa2d4cdb9950a22d662b30a4
msgid "The name of the contract."
msgstr ""

#: ../../units-and-global-variables.rst:352 0e06847812fa440b9a7ee55eca9a00f7
msgid "``type(C).creationCode``"
msgstr ""

#: ../../units-and-global-variables.rst:347 6e51f4a88388489681b30448aa24cc77
msgid "Memory byte array that contains the creation bytecode of the contract. This can be used in inline assembly to build custom creation routines, especially by using the ``create2`` opcode. This property can **not** be accessed in the contract itself or any derived contract. It causes the bytecode to be included in the bytecode of the call site and thus circular references like that are not possible."
msgstr ""

#: ../../units-and-global-variables.rst:362 714ebe7511cb4dc2b4cc65477b950210
msgid "``type(C).runtimeCode``"
msgstr ""

#: ../../units-and-global-variables.rst:355 2ef880b2e9634802a64197248421c994
msgid "Memory byte array that contains the runtime bytecode of the contract. This is the code that is usually deployed by the constructor of ``C``. If ``C`` has a constructor that uses inline assembly, this might be different from the actually deployed bytecode. Also note that libraries modify their runtime bytecode at time of deployment to guard against regular calls. The same restrictions as with ``.creationCode`` also apply for this property."
msgstr ""

#: ../../units-and-global-variables.rst:364 30d5565061fd4bfcaffad80bc76d8399
msgid "In addition to the properties above, the following properties are available for an interface type ``I``:"
msgstr ""

#: ../../units-and-global-variables.rst:370 83ed8779984c4410adc89464077de2f1
msgid "``type(I).interfaceId``:"
msgstr ""

#: ../../units-and-global-variables.rst:368 3717006001604daa93d7714a2be7faab
msgid "A ``bytes4`` value containing the `EIP-165 <https://eips.ethereum.org/EIPS/eip-165>`_ interface identifier of the given interface ``I``. This identifier is defined as the ``XOR`` of all function selectors defined within the interface itself - excluding all inherited functions."
msgstr ""

#: ../../units-and-global-variables.rst:372 e4253420cb8347bb8d7012d588ecbee9
msgid "The following properties are available for an integer type ``T``:"
msgstr ""

#: ../../units-and-global-variables.rst:375 4cf792ca5d4c49e9a74901ed0a70e8d5
msgid "``type(T).min``"
msgstr ""

#: ../../units-and-global-variables.rst:375 f54d4acb51a74306bed06f1744aec710
msgid "The smallest value representable by type ``T``."
msgstr ""

#: ../../units-and-global-variables.rst:377 a93a462d100e40af98548b38ba39507f
msgid "``type(T).max``"
msgstr ""

#: ../../units-and-global-variables.rst:378 f96bf5d7b2d94036a2811943993ed387
msgid "The largest value representable by type ``T``."
msgstr ""

